sudo: required

dist: trusty  # Needs to be feature-flagged?

cache:
  - apt

language:
  - python

# Allows the python virtualenv to use apt-get installed packages, which is
# essential (as ROS recommends this and pip doesn't seem to contain all
# packages, or contains them with errors).
virtualenv:
    system_site_packages: true

# Install system dependencies, namely ROS:
before_install:
  # Define some config vars.
  - export ROS_DISTRO=indigo
  - export ROS_CI_DESKTOP=`lsb_release -cs`  # e.g. [precise|trusty]
  - export CI_SOURCE_PATH=$(pwd)
  - export ROSINSTALL_FILE=$CI_SOURCE_PATH/dependencies.rosinstall
  - export ROS_PARALLEL_JOBS='-j8 -l6'
  # Install ROS
  - sudo sh -c "echo \"deb http://packages.ros.org/ros/ubuntu $ROS_CI_DESKTOP main\" > /etc/apt/sources.list.d/ros-latest.list"
  - wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
  - sudo apt-get update -qq
  # Install ROS
  - sudo apt-get install -y python-catkin-pkg python-rosdep python-wstool ros-$ROS_DISTRO-catkin ros-$ROS_DISTRO-ros ros-$ROS_DISTRO-rospy ros-$ROS_DISTRO-rostest
  - source /opt/ros/$ROS_DISTRO/setup.bash
  # Setup for rosdep
  - sudo rosdep init
  - rosdep update

# Set up catkin workspace to have the source code.
# install:
  - mkdir -p ~/catkin_ws/src
  - cd ~/catkin_ws/src
  - catkin_init_workspace

  # Create the devel/setup.bash (run catkin_make with an empty workspace) and
  # source it.
  - cd ~/catkin_ws
  - catkin_make
  - source devel/setup.bash

  # Add the package under test to the workspace.
  - cd ~/catkin_ws/src
  - ln -s $CI_SOURCE_PATH . # Link the repo we are testing to the new workspace

  # Use wstool to handle dependencies
  - wstool init
  - if [[ -f $ROSINSTALL_FILE ]] ; then wstool merge $ROSINSTALL_FILE ; fi
  - wstool up

before_script:
  # Install all ROS dependencies available as ROS packages.
  - cd ~/catkin_ws
  - rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO

# Build code here.
script:
  - cd ~/catkin_ws
  - catkin_make
  # Testing: Use both run_tests (to see the output) and test (to error out).
  - catkin_make run_tests  # This always returns 0.
  - catkin_make test  # This will return non-zero if a test fails.


# NOTE: Build lifecycle on Travis.ci is something like this:
# before_install
# install
# before_script
# script
# after_success or after_failure
# after_script
# OPTIONAL before_deploy
# OPTIONAL deploy
# OPTIONAL after_deploy
